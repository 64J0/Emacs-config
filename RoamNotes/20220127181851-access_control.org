:PROPERTIES:
:ID:       273edbf4-0d24-45f6-bd13-a8fadfbb6a15
:END:
#+title: Access Control

Notes taken from *[book] Secutiry Engineering*.

[...] From  the 1970s, access control  became the centre of  gravity of computer
security. It's where  security engineering meets computer  science. its function
is to control  which principals (persons, processes, machines,  ...) have access
to which  resources in the  system - which files  they can read,  which programs
they can execute, how they share data with other principals, and so on.

** Definitions:

+ Discretionary access control (DAC):
  Leave protection to the machine operator.

+ Mandatory access control (MAC):
  Under the control  of the vendor and protect the  operating system itself from
  being modified by malware.

** Operating system access controls

In a  common system it's  not practical to  set permissions individually.  It is
better to group people under some configuration that share the same permissions.
   
*** Groups and roles

[...] Some vendors  (such as Microsoft) use the words  /group/ and /role/ almost
interchangeably, but  a more  careful definition is  that a group  is a  list of
principals, while a role  is a fixed set of access permissions  that one or more
principals may assume for a period of time.

*** Active Directory on Windows

[...] Active Directory  is essentially a database that  organises users, groups,
machines, and organisational units within a domain in a hierarchical namespaces.

*** Virtualisation

Virtualisation is  what powers cloud computing;  it enables a single  machine to
emulate a  number of  machines independently,  so that you  can rent  a /virtual
machine/ (VM)  in a data centre  for a few tens  of dollars a month  rather than
having to pay maybe a hundred for a whole server.

[...] When it  was invented by IBM in  the 1960s, its main goal was  to enable a
new mainframe to run legacy apps from several old machine architectures; it soon
became  normal for  a company  that  bought two  computers  to use  one for  its
production environment and the other as  a series of logically separate machines
for development, testing, and minor applications.

[...] VM security claims rest to some extent on the argument that a VMM (Virtual
Machine Monitor) hypervisor's code can be  much smaller than an operating system
and thus  easier to  code-review and  secure; whether  there are  actually fewer
vulnerabilities is of course an empirical question.

[...] /Containers/ have been  the hot new topic in the  late 2010s. They evolved
as a lightweight alternative to virtualisation  in cloud computing and are often
confused with  it, especially by  the marketing  people.  My definition  is that
while a  VM has a  complete operating system, insulated  from the hardware  by a
hypervisor, a container  is an isolated guest process that  shares a kernel with
other  containers. Container  implementations  separate groups  of processes  by
virtualising  a   subset  of  operating-system  mechanisms,   including  process
identifiers,  interprocess   communication,  and   namespaces;  they   also  use
techniques such as sandboxing and system call filtering.

** Hardware protection

+ Protection problem:
  Preventing one process from interfering with another.

+ Confinement problem:
  Preventing  programs  communicating  outward  other  than  through  authorized
  channels.

** Smashing the stack attack

[...] Programmer are often careless about  checking the size of arguments, so an
attacker who  passes a  long argument  to a program  find that  some of  it gets
treated as code rather than data. The  classic example, used in the Morris worm,
was a  vulnerability in the  Unix /finger/  command. A common  implementation of
this would accept  an argument of any  length, although only 256  bytes had been
allocated for  this argument by the  program. When an attacker  used the command
with a longer argument, the trailing  bytes of the argument ended up overwriting
the stack and being executed by the system.

[...]  Stack  overwriting   attacks  have  been  found  against   all  sorts  of
programmable devices - even against things like smartcards and hardware security
modules, whose designers really should have known better.

** Remedies

Software security  is not all  doom and  gloom; things got  substantially better
during the 2000s. At the turn of the century, 90% of vulnerabilities were buffer
overflows; by the time the second edition of  this book came out in 2008, it was
just under half, and now it's even less. Several things made a difference.

1. Specific defenses:
   *Stack canaries*  are a random  number inserted by  the compiler next  to the
   return address  on the  stack. If  the stack is  overwritten, then  with high
   probability the canary will change.

   *Data execution  prevention (DEP)* marks all  memory as either data  or code,
   and prevents the former being executed.

   *Address  space layout  randomisation (ASLR)*  arrived  at the  same time  as
   (DEP); by making the memory layout different in each instance of a system, it
   makes  it  harder for  an  attacker  to  predict  target addresses.  This  is
   particularly important now that there are toolkits to do ROP (Return-Oriented
   Programming) attacks, which bypass DEP.

   *Control   flow  integrity*   mechanisms  involve   analysing  the   possible
   control-flow  graph  at  compile  time  and  enforcing  this  at  runtime  by
   validating indirect control-flow transfers. Although  this is used in several
   products, the analysis is not precise, and block-oriented programming attacks
   are among the tricks that have evolved to exploit the gaps.

2. Better general-purpose tools:
   *Static-analysis  programs*  such  as  Coverity can  find  large  numbers  of
   potential software bugs  and highlight ways in which code  deviates from best
   practice.

   *Use better languages*: use Rust instead of C or C++.

3. Better training:
   Microsoft  announced  a  security  initiative by  2002  that  involved  every
   programmer being trained in how to  write secure code. They produced the book
   /Writing Secure Code/ as a result. Other companies followed suit.

4. DevSecOps:
   Agile development methodology  is extended to allow very  rapid deployment of
   patches and response to incidents; it  may enable the effort put into design,
   coding and testing to be aimed at the most urgent problems.

** Architecture

Architecture matters; having  clean interfaces that evolve in  a controlled way,
under the  eagle eye  of someone experienced  who has a  long-term stack  in the
security of the product, can make  a huge difference. *Programs should only have
as  much privilege  as  they  need: the  principle  of  least privilege*.  [...]
*Software should be designed so that  the default configuration, and in general,
the easiest way of doing something, should be safe*.

** Further reading:

+ https://googleprojectzero.blogspot.com/
+ https://www.lightbluetouchpaper.org/
+ https://www.youtube.com/watch?v=2qNlv435L5g&ab_channel=SecurityEngineering
