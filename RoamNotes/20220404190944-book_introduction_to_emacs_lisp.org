:PROPERTIES:
:ID:       2a3287c2-0103-4e20-9dc0-5f1ec602fd7c
:END:
#+title: [Book] Introduction to Emacs Lisp
#+date: [2022-04-04 seg 19:09]

Those notes are based on the free pdf called "An Introduction to Programming in
Emacs Lisp".

+ Lisp History

  Lisp was first developed in the late 1950s at the MIT for research in
  artificial intelligence. The great power of the Lisp language makes it
  superior for other purposes as well, such as writing editor commands and
  integrated environments.

  GNU Emacs Lisp is largely inspired by Maclisp, which was written at MIT in the
  1960s. It is somewhat inspired by Common Lisp, which became a standard in the
  1980s. However, Emacs Lisp is much simpler than Common Lisp. (The standard
  Emacs distribution contains an optional extensions file, cl.el, that adds many
  Common Lisp features to Emacs Lisp.)

* 1 - Lisp Processing

  Lisp stands for LISt Processing, and the programming language handles lists
  (and lists of lists) by putting them between parentheses. Those parentheses
  mark the boundaries of the list.

  #+begin_src elisp :tangle no
    ;; Lisp example
    '(rose volet daisy buttercup)
  #+end_src

  In Lisp, both data and programs are represented the same way: lists. Since a
  program looks like data, one program may easily serve as data for another;
  this is a very powerful feature of Lisp.

** Lisp Atoms

   Technically speaking, a list in Lisp consists of parentheses surrounding
   atoms separated by whitespace or surrounding other lists or surrounding both
   atoms and other lists.

   The printed representation of both atoms and lists are called /symbolic
   expressions/ or, more concisely, /s-expressions/.

** Programs

   A list in Lisp is a program ready to run. If you run it (for which the Lisp
   jargon is /evaluate/), the computer will do one of three: do nothing except
   return to you the list itself; send you an error message; or, treat the first
   symbol in the list as a command to do something.

   The single apostrophe, /'/, is called a /quote/; when it precedes a list, it
   tells Lisp to do nothing with the list, other than take it as it is written.

   But, if there is no quote preceding a list, the first item of the list is
   special: it is a command for the computer to obey. In Lisp, these commands
   are called /functions/.

   #+begin_src elisp :tangle no
     (+ 2 2) ; C-x C-e
   #+end_src

   In Lisp, one set of instructions can be attached to several names. On the
   other hand, a symbol can have only one function definition attached to it at
   a time.

** Lisp Interpreter

   First, it looks to see whether there is a quote before the list; if there is,
   the interpreter just gives us the list.  On the other hand, if there is no
   quote, the interpreter looks at the first element in the list and see whether
   it has a function definition. If it does, the interpreter carries out the
   instructions in the function definition. Otherwise, the interpreter prints an
   error message.

   There are some special functions that don't behave like normal functions and
   those are called /special forms/. They are used for special jobs, like
   defining a function, and there are not many of them.

   As well as special forms, there are also /macros/. A macro is a construct
   defined in Lisp, which differs from a function in that it translates a Lisp
   expression into another expression that is to be evaluated in place of the
   original expression.

   [...]

   When the Lisp interpreter works on an expression, the term for the activity
   is called /evaluation/. We say that the interpreter "evaluates the
   expression".

*** Byte Compiling

    One other aspect of interpreting: the Lisp interpreter is able to interpret
    two kinds of entity: humanly readable code, on which we will focus
    exclusively, and specially processes code, called /byte compiled/ code,
    which is not humanly readable. Byte compiled code runs faster than humanly
    readable code.

    You can transform humanly readable code into byte compiled code by running
    one of the compile commands such as /byte-compile-file/. Byte compiled code
    is usually stored in a file that ends with a /.elc/ extension rather than a
    /.el/ extension.

    As a practical matter, for most things you might do to customize or extend
    Emacs, you do not need to byte compile.

** Variables

   In Emacs Lisp, a symbol can have a value attached to it just as it can have a
   function definition attached to it. [...] A symbol that has a value is often
   called a variable.

** Arguments

   + Marker: a special object representing a buffer position.

     This is a specific feature of Emacs Lisp.

     In Emacs, locations in a buffer are recorded as markers. When the mark is
     set with the C-@ or C-SPC command, its position is kept as a marker. The
     mark can be considered a number - the number of characters the location is
     from the beginning of the buffer.

   + 'p' stands for "predicate".

     In the jargon used by the early Lisp researchers, a predicate refers to a
     function to determine whether some property is true or false.

     /number-or-marker-p/.

   + The /message/ function.

     This function is used to send messages to the user, similar to a
     console.log from javascript.

     #+begin_src elisp :tangle no
       (message "This message appears in the echo area!")

       (message "The name of this buffer: %s" (buffer-name))

       (message "The value of fill-column: %d" fill-column)
     #+end_src

** Binding a Value to a Variable

   Instead of thinking in terms of "assignment", the is another of thinking
   about binding values to variables and dealing with /set/ and /setq/, which is
   to say that /set/ and /setq/ make the symbol /point/ to the list.

   + set

     Note that when you use /set/, you need to quote both arguments to /set/,
     unless you want them evaluated.

     #+begin_src elisp :tangle no
       (set 'flowers '(rose violet daisy buttercup))

       flowers
       'flowers
     #+end_src

   + setq

     As a practical matter, you almost always quote the first argument to
     /set/. The combination of /set/ and a quoted first argument is so common
     that it has its own name: the special form /setq/.

     #+begin_src elisp :tangle no
       (setq carnivores '(lion tiger leopard))

       carnivores 'carnivores
     #+end_src

* 2 - Practicing Evaluation

  + The functions you evaluate by typing keystrokes are called /interactive/
    /functions/, or /commands/. How to make a function interactive is illustrated
    in the next chapter.

  In addition to typing keyboard commands, we have seen a second way to evaluate
  an expression: by positioning the cursor after a list and typing /C-x C-e/.

  #+begin_src elisp :tangle no
    (buffer-name) ; name of the file
    (buffer-file-name) ; full-path of the file
  #+end_src

  In those expressions, the parentheses tell the Lisp interpreter to treat
  buffer-name and buffer-file-name as functions; without the parentheses, the
  interpreter would attempt to evaluate the symbols as variables.

** Difference between file and buffer
  
   A file and a buffer are two different entities. A file is information
   recorded permanently in the computer (unless you delete it). A buffer, on the
   other hand, is information inside of Emacs that will vanish at the end of the
   editing session (or when you kill the buffer). Usually a buffer contains
   information that you have copied from a file; we say the buffer is visiting
   that file. This copy is what you work on and modify. Changes to the buffer do
   not change the file, until you save the buffer. When you save the buffer, the
   buffer is copied to the file and is thus saved permanently.

** Nil

   The symbol /nil/ is from the Latin word for "nothing". In Lisp, nil is also
   used to mean "false" and is a synonym for the empty list, ().

** Emacs functions

   #+begin_src elisp :tangle no
     (current-buffer)
     (other-buffer)
     (switch-to-buffer (other-buffer))
     (buffer-size)
     (point)
     (point-min)
     (point-max)
   #+end_src

* 3 - How to Write Function Definitions

  When the Lisp interpreter evaluates a list, it looks to see whether the first
  symbol on the listhas a function definition attached to it; or, put another
  way, whether the symbol points to a function definition. If it does, the
  computer carries out the instruction in the definition.

  When you write code in Emacs Lisp, you do not distinguish between the use of
  functions written in C and the use of functions written in Emacs Lisp. The
  difference is irrelevant.

** The defun Macro

   + defun is an abbreviation for /define function/.

   A function definition has up to five parts following the word /defun/:

   1. The name of the symbol to which the function definition should be attached.
   2. A list of the arguments that will be passed to the function. If no arguments
      will be passed to the function, this is an empty list, ().
   3. Documentation describing the function. (Technically optional, but strongly
      recommended).
   4. Optionally, an expression to make the function interactive so you can use it
      by typing M-x and then the name of the function; or by typing an appropriate
      key of keychord.
   5. The code that instructs the computer what to do: the body of the function
      definition.

   It's helpful to think of the five parts of a function definition as being
   organized in a template, with slods for each part:
   
   #+begin_src elisp :tangle no
     (defun function-name (arguments...)
       "optional-documentation ..."
       (interactive argument-passing-info) ; optional
       body...)
   #+end_src

*** Function example

    #+begin_src elisp :tangle no
      (defun multiply-by-seven (number)
        "Multiply NUMBER by seven."
        (* 7 number))

      (multiply-by-seven 5)
    #+end_src

** Comments

   In Lisp, everything on a line that follows a semicolon is a comment. The end
   of the line is the end of the comment. To stretch a comment over two or more
   lines, begin each line with a semicolon (;).

** Interactive Function

   You make a function interactive by placing a list that begins with the
   special form /interactive/ immediately after the documentation. A user can
   invoke an interactive function by typing /M-x/ and then the name of the
   function; or by typing the keys to which it is bound, for example, by typing
   /C-n/ for /next-line/ or /C-x h/ for /mark-whole-buffer/.

   #+begin_src elisp :tangle no
     (defun multiply-by-seven (number) ; Interactive version
       "Multiply NUMBER by seven."
       (interactive "p")
       (message "The result is %d" (* 7 number)))
   #+end_src

   To use this function you must do /C-u/, write a number, and then /M-x/
   /multiply-by-seven/.

** let

   The /let/ expression is a special form in Lisp that you will need to use in
   most function definitions.

   /let/ is used to attach or bind a symbol to a value in such a way that the
   Lisp interpreter will not confuse the variable with a variable of the same
   name that is not part of the function.

   Local variables created by a /let/ expression retain their value only within
   the /let/ expression itself (and within expressions called within the /let/
   expression); the local variables have no effect outside the /let/ expression.

   Another way to think about let is that it is like a /setq/ that is temporary
   and local. The values set by /let/ are automatically undone when the /let/ is
   finished. The setting only affects expressions that are inside the bounds of
   the /let/ expression. In computer science jargon, we would say the binding of
   a symbol is visible only in functions called in the /let/ form; in Emacs
   Lisp, the default scoping is dynamic, not lexical.

   A /let/ expression is a list of three parts. The first part is the symbol
   /let/. The second part is a list, called a /varlist/, each element is either
   a symbol by itself or a two-element list, the first element of which is a
   symbol. The third part of the /let/ expression is the body of the /let/. The
   body usually consists of one or more lists.

   #+begin_src elisp :tangle no
     ; template for let expression
     (let varlist body...)

     (let ((variable value)
           (variable value)
           ...)
       body...)
   #+end_src

   #+begin_src elisp :tangle no
     (let ((zebra "stripes")
           (tiger "fierce"))
       (message "One kind of animal has %s and another is %s."
           zebra tiger))
   #+end_src
   
** if

   The basic idea behind an /if/, is that if a test is true, then an expression
   is evaluated.

   #+begin_src elisp :tangle no
     (if (> 5 4)
         (message "5 is greater than 4!"))
   #+end_src

   #+begin_src elisp :tangle no
     (defun type-of-animal (characteristic)
       "Print mesage in echo are depending on CHARACTERISTIC.
          If the CHARACTERISTIC is the string \"fierce\",
          then warn of a tiger."
       (if (equal characteristic "fierce")
           (message "It is a tiger!")))

     (type-of-animal "fierce")
     (type-of-animal "not fierce")
   #+end_src

** if-then-else

   The word "else" is not written in the Lisp code; the else-part of an if
   expression comes after the then-part. In the written Lisp, the else-part is
   usually written to start on a line of its own and is indented less than the
   then-part:

   #+begin_src elisp :tangle no
     (if true-or-false-test
         action-to-carry-out-if-the-test-returns-true
       action-to-carry-out-if-the-test-returns-false)

     (if (> 4 5)
         (message "4 falsely greater than 5!")
       (message "4 is not greater than 5!"))
   #+end_src

   #+begin_src elisp :tangle no
     (defun type-of-animal (characteristic)
       "Print mesage in echo are depending on CHARACTERISTIC.
          If the CHARACTERISTIC is the string \"fierce\",
          then warn of a tiger."
       (if (equal characteristic "fierce")
           (message "It is a tiger!")
         (message "It is not a tiger!")))

     (type-of-animal "fierce")
     (type-of-animal "not fierce")
   #+end_src

** Truth and Falsehood in Emacs Lisp

   In Emacs Lisp, the symbol nil has two meanings. First, it means the empty
   list. Second, it means false and is the value returned when a
   true-or-false-test tests false. nil can be written as an empty list, (), or
   as nil. As far as the Lisp interpreter is concerned, () and nil are the same.

   In Emacs Lisp, any value that is not nil - is not the empty list - is
   considered true.

** save-excursion

   In Emacs Lisp programs used for editing, the save-excursion function is very
   common. It saves the location of point, executes the body of the function,
   and then restores points to its previous position if its location was
   changed. Its primary purpose is to keep the user from being suprised and
   disturbed by unexpected movement of point.

   Before discussing save-excursion, however, it may be useful first to review
   what point and mark are in GNU Emacs.

   Point is the current location of the cursor. Wherever the cursor is, that is
   point. In Emacs Lisp, point is an integer.

   The mark is another position in the buffer; its value can be set with a
   command such as C-SPC (set-mark-command). If a mark has been set, you can use
   the command C-x C-x (exchange-point-and-mark) to cause the cursor to jump to
   the mark and set the mark to be the previous position of point.

   The part of the buffer between point and mark is called the region. Numerous
   commands work on the region, including center-region, count-lines-region,
   kill-region, and print-region.

   In Emacs, a function frequently moves point as part of its internal workings
   even though a user would not expect this. For example, count-lines-region
   moves point. To prevent the user from being bothered by jumps that are both
   unexpected and (from the user's point of view) unnecessary, save-execution is
   often used to keep point in the location expected by the user. The use of
   save-excursion is good housekeeping.

   To make sure the house stays clean, save-excursion restores the value of
   point even if something goes wrong in the code inside of it (or, to be more
   precise and to use the proper jargon, "in case of abnormal exit").

   #+begin_src elisp :tangle no
     (save-excursion
       body...)
   #+end_src

** Exercises

   #+begin_src elisp :tangle no
     (defun get_double_interactive (number)
       "Output the double of the NUMBER input."
       (interactive "p")
       (message "The double of %d is %d."
                number
                (* 2 number))) ; C-u 6 M-x get_double_interactive

     (defun get_double_non_interactive (number)
       "Output the double of the NUMBER input."
       (message "The double of %d is %d."
                number
                (* 2 number)))

     (get_double_non_interactive 7)
   #+end_src

   #+begin_src elisp :tangle no
     (defun is_fill_column_bigger_than (number)
       "This function check if the NUMBER provided by the user is
             bigger than the fill-column value."
       (if (> number fill-column)
           (message "Number %d is bigger than fill-column %d."
                    number
                    fill-column)
         (message "Number %d is not bigger than fill-column %d."
                  number
                  fill-column)))

     (is_fill_column_bigger_than 10)
     (is_fill_column_bigger_than 100)
   #+end_src
* 4 - A Few Buffer-Related Functions

  In this chapter we study in detail several of the functions used in GNU Emacs.

  If you're interested, you can get the full documentation of any Emacs Lisp
  function at any time by typing /C-h f/ and then the name of the function (and
  then RET). Similarly, you can get the full documentation for a variable by
  typing /C-h v/ and then the name of the variable (and then RET).

** A Simplified beginning-of-buffer Definition

   #+begin_src elisp :tangle no
     (defun simplified-beginning-of-buffer ()
       "Move point to the beginning of the buffer;
             leave mark at previous position."
       (interactive)
       (push-mark)
       (goto-char (point-min)))
   #+end_src

** The Definition of mark-whole-buffer

   The mark-whole-buffer function is not as commonly used as the
   beginning-of-buffer function, but is useful nonetheless: it marks a whole
   buffer as a region by putting point at the beginning and a mark at the end of
   the buffer. It is generally bound to C-x h.

   #+begin_src elisp :tangle no
     (defun mark-whole-buffer ()
       "Put point at beginning and mark at the end of buffer.
     You probably should not use this function in Lisp programs;
     it is usually a mistake for a Lisp function to use any subroutine
     that uses or sets the mark."
       (interactive)
       (push-mark (point))
       (push-mark (point-max) nil t)
       (goto-char (point-min)))
   #+end_src

** The Definition of append-to-buffer

   This command does copy the region (that is, the part of the buffer between
   point and mark) from the current buffer to a specified buffer.

   Most of append-to-buffer is concerned with setting up the conditions for
   insert-buffer-substring to work: the code must specify the buffer to which
   the text will go, the window it comes from and goes to, and the region that
   will be copied.

   #+begin_src elisp :tangle no
     (defun append-to-buffer (buffer start end)
       "Append to specified buffer the text of the region.
     It is inserted into that buffer before its point.

     When calling from a program, give threee arguments:
     BUFFER (or buffer name), START and END.
     START and END specify the portion of the current buffer to be copied."
       (interactive
        (list (read-buffer "Append to buffer: " (other-buffer
                                                 (current-buffer) t))
              (region-beginning) (region-end)))
       (let ((oldbuf (current-buffer)))
         (save-excursion
           (let* ((append-to (get-buffer-create buffer))
                  (windows (get-buffer-window-list append-to t t))
                  point)
             (set-buffer append-to)
             (setq point (point))
             (barf-if-buffer-read-only)
             (insert-buffer-substring oldbuf start end)
             (dolist (window windows)
               (when (= (window-point window) point)
                 (set-window-point window (point))))))))
   #+end_src

* 5 - A Few More Complex Functions

  In this chapter, we build on what we have learned in previous chapters by
  looking at more complex functions.

  + copy-to-buffer
  + insert-buffer
  + beginning-of-buffer

* 6 - Narrowing and Widening

  Narrowing is a feature of Emacs that makes it possible for you to focus on a
  specific part of a buffer, and work without accidentally changing other parts.

  + Narrowing is normally disabled since it can confuse novices.

  With narrowing, the rest of the buffer is made invisible, as if it weren't
  there. This is an advantage if, for example, you want to replace a word in one
  part of a buffer but not in another: you narrow to the part you want and the
  replacement is carried out only in that section, not in the rest of the
  buffer.

  The key binding for ~narrow-to-region~ is ~C-x n n~.

  + The function ~widen~ is used to restore from the narrowed region.

* 7 - car, cdr, cons: Fundamental Functions

  In Lisp, ~car~, ~cdr~, and ~cons~ are fundamental functions. The ~cons~
  function is used to construct lists, and the ~car~ and ~cdr~ functions are
  used to take them apart.

  The name of the ~cons~ function is an abbreviation of the word "construct".

  The origins of the names for ~car~ and ~cdr~, on the other hand, are esoteric:
  ~car~ is an acronym for the phrase "Contents of the Address part of the
  Register"; and ~cdr~ (pronounced "could-er") is an acronym from the phrase
  "Contents of the Decrement part of the Register".

  These phrases refer to specific pieces of hardware on the very early computer
  on which the original Lisp was developed. Besides being obsolete, the phrases
  have been completely irrelevant for more than 25 years to anyone thinking
  about Lisp. Nonethless, although a few brave scholars have begun to use more
  reasonable names for these functions, the old terms are still in use.

** car and cdr

*** car
   
    The ~car~ or a list is, quite simply, the first item in the list. Thus the
    ~car~ of the list (rose violet daisy buttercup) is rose.

    #+begin_src elisp :tangle no
      (car '(rose violet daisy buttercup)) ; rose
    #+end_src

    ~car~ does not remove the first item from the list; it only reports what it
    is. After ~car~ has been applied to a list, the list is still the same as it
    was. In the jargon, ~car~ is “non-destructive”. This feature turns out to be
    important.

*** cdr

    The ~cdr~ of a list is the rest of the list, that is, the ~cdr~ function
    returns the part of the list that follows the first item. Thus, while the
    ~car~ of the list '(rose violet daisy buttercup) is rose, the rest of the
    list, the values returned by the ~cdr~ function is, (violet daisy
    buttercup).

    #+begin_src elisp :tangle no
      (cdr '(rose violet daisy buttercup)) ; (violet daisy buttercup)
    #+end_src

    Like ~car~, ~cdr~ does not remove any elements from the list — it just
    returns a report of what the second and subsequent elements are.
** cons

   The cons function constructs lists; it is the inverse of ~car~ and ~cdr~. For
   example:

   #+begin_src elisp :tangle no
     (cons 'pine '(fir oak maple)) ; (pine fir oak maple)
   #+end_src

   We often say that cons puts a new element at the beginning of a list, or that
   it attaches or pushes elements onto the list, but this phrasing can be
   misleading, since cons does not change an existing list, but creates a new
   one.
   
   Like car and cdr, cons is non-destructive.

*** length of a list
   
   You can find out how many elements there are in a list by using the Lisp
   function length, as in the following examples:

   #+begin_src elisp :tangle no
     (length '(buttercup daisy)) ; 2
   #+end_src

** nthcdr

   The ~nthcdr~ function is associated with the cdr function. What it does is
   take the cdr of a list repeatedly. For example:

   #+begin_src elisp :tangle no
     (nthcdr 2 '(pine fir oak maple)) ; (oak maple)
     ; ==
     (cdr (cdr '(pine fir oak maple))) ; (oak maple)
   #+end_src

** nth

   The ~nthcdr~ function takes the ~cdr~ of a list repeatedly. The ~nth~
   function takes the ~car~ of the result returned by ~nthcdr~. It returns the
   Nth element of the list.

   #+begin_src elisp :tangle no
     (nth 0 '("one" "two" "three")) ; "one"
     (nth 1 '("one" "two" "three")) ; "two"
   #+end_src

** setcar

   The ~setcar~ and ~setcdr~ functions set the ~car~ or the ~cdr~ of a list to a
   new value. They actually change the original list, unlike ~car~ and ~cdr~
   which leave the original list as it was.

   #+begin_src elisp :tangle no
     (setq animals (list 'antelope 'giraffe 'lion 'tiger))
     animals ; (antelope giraffe lion tiger)

     (setcar animals 'hippopotamus)
     animals ; (hippopotamus giraffe lion tiger)
   #+end_src

** setcdr

   The ~setcdr~ function is similar to the ~setcar~ function, except that the
   function replaces the second and subsequent elements of a list rather than
   the first element.

   #+begin_src elisp :tangle no
     (setq domesticated-animals (list 'horse 'cow 'sheep 'goat))
     domesticated-animals ; (horse cow sheep goat)

     (setcdr domesticated-animals '(cat dog))
     domesticated-animals ; (horse cat dog)
   #+end_src

** Exercise

   #+begin_src elisp :tangle no
     (setq list_of_birds
           (cons 'bird_1
                 (cons 'bird_2
                       (cons 'bird_3 '(bird_4)))))
     list_of_birds
     (cons list_of_birds list_of_birds)

     (setcar list_of_birds 'fish_1)
     list_of_birds

     (setcdr list_of_birds '(fish_2 fish_3 fish_4))
     list_of_birds
   #+end_src
