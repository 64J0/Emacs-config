#+title: Studies
#+author: Me
#+date: 2021-07-31

Org is a highly flexible structured plain text file format, composed of a few simple, yet versatile,
structures - constructed to be both simple enough for the novice and powerful enough for the expert.

Tools I want to get better during august:

- [] F#
- [] Emacs
- [] Git

---
Started 2021-08:

* TODO F# docs

** Functions

   Functions are the fundamental unit of program execution in any programming language. In F#,
   all functions are considered values; in fact, they are known as /function values/.

   #+BEGIN_SRC fsharp
     // Non-recursive function definition
     let [inline] function-name parameter-list [: return-type] = function-body
     // Recursive function definition
     let rec function-name parameter-list = recursive-function body
   #+END_SRC

   *Scope*

   At any level of scope other than module scope, it is not an error to reuse a value or function
   name. If you reuse a name, the name declared later shadows the name declared earlier. However,
   at the top level scope in a module, names must be unique.

   *Partial application of arguments*

   If you supply fewer than the specified number of arguments, you create a new function that
   expects the remaining arguments. This method of handling arguments is referred to as /currying/
   and is characteristic of functional programming languages like F#.

   #+BEGIN_SRC fsharp
     let cylinderVolume (radius: float) (length: float) : float =
	 let pi = 3.14159
	 length * pi * radius * radius
     let smallPipeRadius = 2.0
     let bigPipeRadius = 3.0
     let smallPipeVolume = cylinderVolume smallPipeRadius
     let bigPipeVolume = cylinderVolume bigPipeRadius
   #+END_SRC

   Because functions are values, they can be used as arguments to other functions or in other
   contexts where values are used.

   *Lambda expressions*

   A /lambda expression/ in an unnamed function.

   #+BEGIN_SRC fsharp
     let apply (fn: int -> int) value = fn value
     let lambdaFun = fun x -> x + 1
     apply lambdaFun 2
     // result: 3
   #+END_SRC

   *Function composition and pipelining*

   The composition of two functions *fn1* and *fn2* is another function that represents the
   application of *fn1* followed the application of *fn2*.

   #+BEGIN_SRC fsharp
     let fn1 x = x + 1
     let fn2 y = y * 2
     let compfn = fn1 >> fn2
     let result = compfn 100
     // result: 202
   #+END_SRC

   Pipelining enables function calls to be chained together as successive operations. Pipelining
   works as follows:

   #+BEGIN_SRC fsharp
     let result = 100 |> fn1 |> fn2
     // result: 202
   #+END_SRC

   *Recursive functions*

   For some recursive functions, it is necessary to refactor a more "pure" definition to one that
   is [[https://cs.stackexchange.com/questions/6230/what-is-tail-recursion][tail recursive]]. This prevents unnecessary recomputations.

* DONE Learning F# (book)
  CLOSED: [2021-08-15 dom 10:02]

The F# compiler -- which is open source -- compiles your programs into IL, which means that you
can use F# code from any .NET compatible language such as C#; and run it on Mono, .NET Core, or the
.NET framework on windows.

[<EntryPoint>] -> This syntax defines a .NET attribute.

| I'll not continue reading this book since its content is not well explained. |

* TODO Emacs docs

  Ref: [[https://orgmode.org/guide][ORG COMPACT GUIDE]]

** TABLES
  Org comes with a fast and intuitive table editor. Spreadsheet-link calculations are supported in
  connection with the Emacs Calc package. [[https://www.gnu.org/software/emacs/manual/html_node/calc/index.html#Top][GNU Emacs calculator]].

  A table is re-aligned automatically each time you press /TAB/ or /RET/ or /C-c C-c/ inside the
  table. /TAB/ also moves to the next field (/RET/ to the next row) and creates new table rows at
  the end of the table or before horizontal lines. The indentation of the table is set by the first
  line.

  #+BEGIN_SRC org
    |Name|Phone|Age|
    |-
    
    + /TAB/
    
    =
    
    | Name | Phone | Age |
    |------+-------+-----|
    |      |       |     |
  #+END_SRC

  When typing text into a field, Org treats /DEL/, /Backspace/, and all character keys in a special
  way, so that inserting and deleting avoids shifting other fields. Also, when typing immediately after
  point was moved into a new field with /TAB/, the field is automatically made blank.

  *Some commands:*

  /C-c C-c/
    Re-align the table without moving point.

  /TAB/
    Re-align the table, move to the next field. Creates a new row if necessary.

  /S-TAB/
    Re-align, move to previous field.

  /RET/
    Re-align the table and move down to next row. Creates a new row if necessary.

  /S-UP/
  /S-DOWN/
  /S-LEFT/
  /S-RIGHT/
    Move a cell up, down, left, and right by swapping with adjacent cell.

  /M-LEFT, M-RIGHT/
    Move the current column left/right.

  /M-S-LEFT/
    Kill the current column.

  /M-S-RIGHT/
    Insert a new column to the left of point position.

  /M-UP, M-DOWN/
    Move the current row up/down.

  /M-S-UP/
    Kill the current row or horizontal line.

  /M-S-DOWN/
    Insert a new row above the current row. With a prefix argument, the line is created below the
    current one.

  /C-c -/
    Insert a horizontal line below current row. With a prefix argument, the line is created above the
    current line.

  /C-c RET/
    Insert a horizontal line below current row, and move the point into the row below that line.

  /C-c ^/
    Sort the table lines in the region. The position of point indicates the column to be used for
    sorting, and the range of lines is the range between the nearest horizontal separator lines, or
    the entire table.
  
** HYPERLINKS

  Org provides links inside a file, external links to other files, and much more. Also, Org
  recognizes plain URIs, possibly wrapped within angle brackets, and activate them as clickable
  links. The general link format, however, looks like this.
   
  #+BEGIN_SRC org
    [[LINK][DESCRIPTION]]
    
    [[LINK]]
  #+END_SRC

  *Some commands:*

  /C-c C-l/
    Insert a link. This prompts for a link to be inserted into the buffer. You can just type a link,
    or use history keys /UP/ and /DOWN/ to access stored links. You will be prompted for the
    description part of the link.
  
  /C-c C-l/
    Edit the invisible /LINK/ part, with the point on the link.

  /C-c C-o/
    Open link at point.

  /C-c &/
    Jump back to a recorded position. A position is recorded by the commands following internal links,
    and by /C-c %/. Using this command several times in direct succession moves through a ring of
    previously recorded positions.

** /TODO ITEMS/

   Org mode does not require TODO lists to live in separate documents. Instead, TODO items are part
   of a notes file, because they usually come up while taking notes.

   Basically, any headline becomes a TODO item when it starts with the word 'TODO':

   #+BEGIN_SRC org
     **** TODO Write letter to Sam Fortune
   #+END_SRC

   You can use TODO keywords to indicate @emph{sequential} working progress states. [[https://orgmode.org/guide/Multi_002dstate-Workflow.html#Multi_002dstate-Workflow][Doc link]].

   *Checkboxes:*

   Every item in a plain list can be made into a checkbox by starting it with the string '[ ]'.
   Checkboxes are not included into the global TODO list, so they are often great to split a task
   into a number of simple steps.

   *Some commands:*

   /C-c C-t/
     Rotate the TODO state of the current item among
     (unmarked) -> TODO -> DONE -> (unmarked)

   /S-RIGHT/
   /S-LEFT/
     Select the following/preceding TODO state, similar to cycling

   /C-c / t/
     View TODO items in a sparse tree. Folds the entire buffer, but shows all TODO items-with not-DONE
     state-and the headings hierarchy above them.

   /M-x org-agenda t/
     Show the global TODO list. Collects the TODO items (with not-DONE states) from all agenda files
     into a single buffer.

   /S-M-RET/
     Insert a new TODO entry below the current one.

   
     
