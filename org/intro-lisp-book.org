#+Title:[Book]An introduction to programming in Emacs Lisp
#+Author: Vin√≠cius Gajo Marques Oliveira

* Introduction
  + Lisp stands for LISt Processing.

  This programming language  handles lists (and lists of lists)  by putting them
  between parentheses. Lists  are the basis of Lisp. Both  data and programs are
  represented the same way  (using lists), so a program could  serve as data for
  another; this is a very powerful feature of Lisp.

  + Atoms are indivisible parts of a program.

  Technically speaking, a list in Lisp consists of parentheses surrounding atoms
  separated by whitespaces or surrounding  other lsits or surrounding both atoms
  and other lists.

  The  printed representation  of  both  atoms and  lists  are called  ~symbolic
  expressions~ or, more concisely, ~s-expressions~.

  + The word ~form~ sometimes is used as a synonym for ~expression~.

  + The amount of whitespace in a list does not matter.
    - Extra whitespace and newlines are designed to make a list more readable.

  A list  in Lisp  is a program  ready to  run.  The Lisp  jargon for  running a
  program is ~evaluate~.

  The single apostrophe  *'*, is called a  ~quote~; when it precedes  a list, it
  tells  Lisp  to do  nothing  with  the  list, other  than  take  it as  it  is
  written. If there is no quote preceding a  list, the first item of the list is
  special: it is a command for the computer to obey (in Lisp, these commands are
  called ~functions~).

  In Lisp, one set of instructions can be attached to several names.

  Some functions  are unusual and  do not work in  the usual manner.  Those that
  don't  are called  ~special  forms~.  They are  used  for  special jobs,  like
  defining a function, and there are not many of them.

  As well as special functions, there are  also ~macros~. A macro is a construct
  defined in Lisp,  which differs from a  function in that it  translates a Lisp
  expression into  another expression that  is to be  evaluated in place  of the
  original expression.

  The  Lisp interpreter  is  able  to interpret  two  kinds  of entity:  humanly
  readable code,  on which  we will focus  exclusively, and  specially processed
  code,  called  ~byte compiled  code~,  which  is  not humanly  readable.  Byte
  compiled code runs faster than humanly readable code.

  You can transform humanly readable code into byte compiled code by running one
  of the  compile commands  such as *byte-compile-file*.  Byte compiled  code is
  usually stored in a file that ends with a ~.elc~ extension rather than a ~.el~
  extension.

  + The inner lists are evaluated first.

  + In Emacs Lisp, a symbol can have a value or a function attached to it.

  The ~message~ function is used to send messages  to the user and is one of the
  extensionmost useful functions in the language.

  + ~Set~ and ~setq~ make the symbol *point* to the list.
